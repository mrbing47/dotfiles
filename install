#!/usr/bin/env bash

####################################################################
# Setting glob settings
shopt -s nullglob dotglob

####################################################################
# Flags check
YES=0
IGNORE_LINK=0
IGNORE_SCRIPT=0
RESET_SOURCE=0

for arg; do
	case $arg in
	yes)
		YES=1
		;;
	iglink)
		IGNORE_LINK=1
		;;
	igscript)
		IGNORE_SCRIPT=1
		;;
	reset)
		RESET_SOURCE=1
		;;

	esac
done

####################################################################
# Color set

# Reset
Color_Off=''

# Regular Colors
Red=''
Green=''
Yellow=''
Blue=''
Magenta=''

# Icons
Tick=""
Cross=""
Question=""
Symbol_Suffix=""
Exclamation=""

# Cursor Movement
Cursor_Up=""
Clear_Line=""

if [[ -t 1 ]]; then
	# Reset
	Color_Off='\033[0m' # Text Reset

	# Regular Colors
	Red='\033[0;31m'
	Green='\033[0;32m'
	Yellow='\033[0;33m'
	Blue='\033[0;34m'
	Magenta='\033[0;35m'

	# Icons
	Tick="\xE2\x9C\x94"
	Cross="\u2715"
	Question="?"
	Symbol_Suffix="  "
	Exclamation="!"

	# Cursor Movement
	Cursor_Up="\033[1A"
	Clear_Line="\033[K"

fi

error() {
	echo -e "$(red "ERROR:")${Symbol_Suffix}$*" >&2
	exit 1
}

colorify() {
	if [[ -z $1 ]]; then
		error "${Red}Please provide a color to colorify the text.${Color_Off}"
	fi
	echo -ne "${1}${*:2}${Color_Off}"
}

red() {
	colorify "$Red" "$@"
}

green() {
	colorify "$Green" "$@"
}

yellow() {
	colorify "$Yellow" "$@"
}

blue() {
	colorify "$Blue" "$@"
}

magenta() {
	colorify "$Magenta" "$@"
}

ask() {
	if [[ $YES -eq 0 ]]; then
		if [[ "$1" == "-n" ]]; then
			echo
			shift 1
		fi

		echo -ne "$(magenta "$Question")${Symbol_Suffix}$* [Y/n]: "
		read -r input </dev/tty

		echo -ne "${Cursor_Up}${Clear_Line}\r"
		if [[ -z "$input" || "$input" =~ ^[Yy]$ ]]; then
			echo -ne "$(green "$Tick")${Symbol_Suffix}$* [Y/n]: "
			echo -e "$(green "Yes")"
			return 0
		else
			echo -ne "$(red "$Cross")${Symbol_Suffix}$* [Y/n]: "
			echo -e "$(red "No")"
			return 1
		fi
	else
		return 0
	fi
}

exists() {
	if [[ "$1" == "-n" ]]; then
		echo
		shift 1
	fi

	echo -e "$(blue "$Exclamation")${Symbol_Suffix}$1"
}

getfilename() {
	echo "${1##*/}"
}

zshrc=$HOME/.zshrc

# ===== Creating .sourced file =====
sourced=$HOME/.dotfiles.source

if [[ ! -e $sourced ]]; then
	touch "$sourced"
fi

sourced_files=$([[ $RESET_SOURCE -eq 0 ]] && cat "$sourced" || echo "")

# ===== Shelll Scripts =====
script_response=()
script_counter=0

if [[ $IGNORE_SCRIPT -eq 0 ]]; then
	script_files=(script/*)

	echo
	for file in "${script_files[@]}"; do
		filename=$(getfilename "$file")
		filepath=$(realpath "$file")

		if echo "$sourced_files" | grep "^${filepath}$" >/dev/null; then
			exists "File $(yellow "$filename") is already sourced."

		elif ask "Source $(yellow "$filename") ?"; then
			((script_counter += 1))
			script_response+=(1)

		else
			script_response+=(0)
		fi
	done
fi

# ===== Configurations =====
config_files=(config/*)

config_response=()
config_counter=0

if [[ $IGNORE_LINK -eq 0 ]]; then
	# Filtering out all the existing symlinks
	[[ $YES -eq 0 ]] || echo
	for file in "${config_files[@]}"; do
		filename=$(getfilename "$file")

		if [[ -L "$HOME/$filename" ]]; then
			[[ $YES -eq 0 ]] &&
				exists -n "Link for $(yellow "$filename") already exists" ||
				exists "Updating the link for $(yellow "$filename")"

			if ask "Do you wish to update the link?"; then
				((config_counter += 1))
				config_response+=(1)
			fi

		elif ask "Link $(yellow "$filename") ?"; then
			((config_counter += 1))
			config_response+=(1)

		else
			config_response+=(0)
		fi

	done
fi

# ===== Clearing the .dotfiles.source file =====
if [[ "$RESET_SOURCE" -eq 1 ]]; then
	: >"$sourced"
fi

# ===== Shelll Scripts =====

if [[ "$script_counter" -gt 0 ]]; then
	{
		echo -e "\n# ====== Custom sh files ======"
		for i in "${!script_files[@]}"; do
			if [[ "${script_response[$i]}" -eq 1 ]]; then
				filepath="$(realpath "${script_files[$i]}")"
				echo "${filepath}" >>"$sourced"
				echo "source \$HOME${filepath#"$HOME"}"
			fi
		done
		echo -e "# ============================="
	} >>"$zshrc"
fi

# ===== Configurations =====

if [[ "$config_counter" -gt 0 ]]; then
	for i in "${!config_files[@]}"; do
		if [[ "${config_response[$i]}" -eq 1 ]]; then
			filepath="$(realpath "${config_files[$i]}")"
			filename=$(getfilename "${config_files[$i]}")

			ln -sfn "$filepath" "$HOME/$filename" ||
				echo "Unable to create link for $(red "$filename")"
		fi
	done

fi

echo

echo -e "Sourced $(
	if [[ "$script_counter" -eq 0 ]]; then
		red $script_counter
	else
		green $script_counter
	fi
) files"

echo -e "Linked $(
	if [[ "$config_counter" -eq 0 ]]; then
		red $config_counter
	else
		green $config_counter
	fi
) files"

if [[ "$script_counter" -gt 0 || "$config_counter" -gt 0 ]]; then
	echo -e "\nRun $(green "\"source $zshrc\"") to refresh shell"
fi
